{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/webpack/bootstrap","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/webpack/runtime/publicPath","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","export function createCard(cardData, handleDeleteCard, handleLikeCard, openImagePopup, currentUserId, openDeletePopup) { \n  const template = document.querySelector('#card-template').content.querySelector('.card'); \n  const cardElement = template.cloneNode(true); \n\n  const cardImage = cardElement.querySelector('.card__image'); \n  const cardTitle = cardElement.querySelector('.card__title'); \n  const likeButton = cardElement.querySelector('.card__like-button'); \n  const likeCount = cardElement.querySelector('.card__like-count'); \n  const deleteButton = cardElement.querySelector('.card__delete-button'); \n\n  cardImage.src = cardData.link; \n  cardImage.alt = cardData.name; \n  cardTitle.textContent = cardData.name; \n\n  // Обновляет отображение лайков и кнопки\n  function updateLikes() {\n    likeCount.textContent = cardData.likes ? cardData.likes.length : 0;\n    const liked = cardData.likes && cardData.likes.some(user => user._id === currentUserId);\n    if (liked) {\n      likeButton.classList.add('card__like-button_is-active');\n    } else {\n      likeButton.classList.remove('card__like-button_is-active');\n    }\n  }\n\n  updateLikes();\n\n  likeButton.addEventListener('click', () => { \n    const liked = cardData.likes && cardData.likes.some(user => user._id === currentUserId);\n\n    handleLikeCard(cardData._id, liked) \n      .then(updatedCard => { \n        cardData.likes = updatedCard.likes; // обновляем лайки в локальном объекте\n        updateLikes();\n      }) \n      .catch(err => console.error('Ошибка при обновлении лайка:', err)); \n  }); \n\n  if (cardData.owner && cardData.owner._id !== currentUserId) { \n    deleteButton.classList.add('card__delete-button_hidden');\n  } else { \n    deleteButton.classList.remove('card__delete-button_hidden');\n    deleteButton.addEventListener('click', () => { \n      openDeletePopup(cardData._id, cardElement); \n    }); \n  } \n\n  cardImage.addEventListener('click', () => { \n    openImagePopup(cardData.link, cardData.name); \n  }); \n\n  return cardElement; \n}\n","__webpack_require__.p = \"/\";","const config = {\n  baseUrl: 'https://nomoreparties.co/v1/wff-cohort-41',\n  headers: {\n    authorization: 'e5c9c284-f911-40be-bad2-37d729b321df',\n    'Content-Type': 'application/json'\n  }\n};\n\n// Универсальная проверка ответа сервера\nfunction checkResponse(res) {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(`Ошибка: ${res.status}`);\n}\n\n// Получить информацию о текущем пользователе\nexport const getUserInfo = () => {\n  return fetch(`${config.baseUrl}/users/me`, {\n    headers: config.headers\n  }).then(checkResponse);\n};\n\n// Получить начальные карточки\nexport const getInitialCards = () => {\n  return fetch(`${config.baseUrl}/cards`, {\n    headers: config.headers\n  }).then(checkResponse);\n};\n\n// Обновить информацию пользователя (имя и описание)\nexport const updateUserInfo = (name, about) => {\n  return fetch(`${config.baseUrl}/users/me`, {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify({ name, about })\n  }).then(checkResponse);\n};\n\n// Добавить новую карточку с названием и ссылкой\nexport const addNewCard = ({ name, link }) => {\n  return fetch(`${config.baseUrl}/cards`, {\n    method: 'POST',\n    headers: config.headers,\n    body: JSON.stringify({ name, link })\n  }).then(checkResponse);\n};\n\n// Поставить лайк карточке по ID\nexport const addLike = (cardId) => {\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\n    method: 'PUT',\n    headers: config.headers\n  }).then(checkResponse);\n};\n\n// Убрать лайк с карточки по ID\nexport const removeLike = (cardId) => {\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\n    method: 'DELETE',\n    headers: config.headers\n  }).then(checkResponse);\n};\n\n// Удалить карточку по ID\nexport const deleteCard = (cardId) => {\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\n    method: 'DELETE',\n    headers: config.headers\n  }).then(checkResponse);\n};\n\n// Обновить аватар пользователя\nexport const updateUserAvatar = (avatar) => {\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify({ avatar })\n  }).then(checkResponse);\n};","// Обработчик закрытия по Escape\nfunction handleCloseByEscape(evt) {\n  if (evt.key === 'Escape') {\n    const openedPopup = document.querySelector('.popup_is-opened');\n    if (openedPopup) {\n      closePopup(openedPopup);\n    }\n  }\n}\n\n// Функция открытия попапа\nfunction openPopup(popup) {\n  popup.classList.add('popup_is-opened');\n  document.addEventListener('keydown', handleCloseByEscape);\n}\n\n// Функция закрытия попапа\nfunction closePopup(popup) {\n  popup.classList.remove('popup_is-opened');\n  document.removeEventListener('keydown', handleCloseByEscape);\n}\n\n// Обработчик закрытия по клику на оверлей\nfunction setPopupCloseByOverlay(popup) {\n  popup.addEventListener('mousedown', (evt) => {\n    if (evt.target === popup) {\n      closePopup(popup);\n    }\n  });\n}\n\nfunction openImagePopup(link, name) {\n  const popup = document.querySelector('.popup_type_image'); // класс вашего попапа с картинкой\n  const popupImage = popup.querySelector('.popup__image');\n  const popupCaption = popup.querySelector('.popup__caption');\n\n  popupImage.src = link;\n  popupImage.alt = name;\n  popupCaption.textContent = name;\n\n  openPopup(popup);\n}\n\nexport { openPopup, closePopup, setPopupCloseByOverlay, openImagePopup };","function showInputError(formElement, inputElement, errorMessage, config) {\n  const errorElement = formElement.querySelector(`.${inputElement.name}-error`);\n  inputElement.classList.add(config.inputErrorClass);\n  errorElement.textContent = errorMessage;\n  errorElement.classList.add(config.errorClass);\n}\n\nfunction hideInputError(formElement, inputElement, config) {\n  const errorElement = formElement.querySelector(`.${inputElement.name}-error`);\n  inputElement.classList.remove(config.inputErrorClass);\n  errorElement.textContent = '';\n  errorElement.classList.remove(config.errorClass);\n}\n\nfunction checkInputValidity(formElement, inputElement, config) {\n  if (!inputElement.validity.valid) {\n    // Если ошибка по паттерну — берем сообщение из data-атрибута\n    let errorMessage = inputElement.validationMessage;\n    if (inputElement.validity.patternMismatch) {\n      errorMessage = inputElement.dataset.errorMessage || errorMessage;\n    }\n    showInputError(formElement, inputElement, errorMessage, config);\n  } else {\n    hideInputError(formElement, inputElement, config);\n  }\n}\n\nfunction hasInvalidInput(inputList) {\n  return inputList.some(inputElement => !inputElement.validity.valid);\n}\n\nfunction toggleButtonState(inputList, buttonElement, config) {\n  if (hasInvalidInput(inputList)) {\n    buttonElement.classList.add(config.inactiveButtonClass);\n    buttonElement.disabled = true;\n  } else {\n    buttonElement.classList.remove(config.inactiveButtonClass);\n    buttonElement.disabled = false;\n  }\n}\n\nfunction setEventListeners(formElement, config) {\n  const inputList = Array.from(formElement.querySelectorAll(config.inputSelector));\n  const buttonElement = formElement.querySelector(config.submitButtonSelector);\n\n  toggleButtonState(inputList, buttonElement, config);\n\n  inputList.forEach(inputElement => {\n    inputElement.addEventListener('input', () => {\n      checkInputValidity(formElement, inputElement, config);\n      toggleButtonState(inputList, buttonElement, config);\n    });\n  });\n}\n\nfunction enableValidation(config) {\n  const formList = Array.from(document.querySelectorAll(config.formSelector));\n  formList.forEach(formElement => {\n    setEventListeners(formElement, config);\n  });\n}\n\nfunction clearValidation(formElement, config) {\n  const inputList = Array.from(formElement.querySelectorAll(config.inputSelector));\n  const buttonElement = formElement.querySelector(config.submitButtonSelector);\n\n  inputList.forEach(inputElement => {\n    hideInputError(formElement, inputElement, config);\n    inputElement.setCustomValidity('');\n  });\n\n  toggleButtonState(inputList, buttonElement, config);\n}\n\nexport { enableValidation, clearValidation };","import './pages/index.css'; \n\nimport { createCard } from './components/card.js'; \n\nimport logo from './images/logo.svg'; \n\nimport { \n  getUserInfo, \n  getInitialCards, \n  updateUserInfo, \n  addNewCard, \n  addLike, \n  removeLike, \n  deleteCard, \n  updateUserAvatar \n} from './components/api.js'; \n\nimport { openPopup, closePopup, setPopupCloseByOverlay, openImagePopup } from './components/modal.js';\n\nimport { enableValidation, clearValidation } from './components/validation.js'; \n\nimport avatar from './images/avatar.jpg'; \n\n// --- Находим DOM-элементы ---\n\nconst logoImg = document.querySelector('.header__logo'); \n\nconst profileAvatarImage = document.querySelector('.profile__image'); \nconst avatarEditButton = document.querySelector('.profile__avatar-edit-button'); \nconst editButton = document.querySelector('.profile__edit-button'); \nconst addButton = document.querySelector('.profile__add-button'); \n\nconst popupEdit = document.querySelector('.popup_type_edit'); \nconst popupNewCard = document.querySelector('.popup_type_new-card'); \nconst popupImage = document.querySelector('.popup_type_image'); \n\nconst placesList = document.querySelector('.places__list'); \nconst popups = document.querySelectorAll('.popup'); \n\nconst formEditProfile = popupEdit.querySelector('.popup__form'); \nconst nameInput = popupEdit.querySelector('input[name=\"name\"]'); \nconst descriptionInput = popupEdit.querySelector('input[name=\"description\"]'); \nconst profileName = document.querySelector('.profile__title'); \nconst profileDescription = document.querySelector('.profile__description'); \n\nconst formNewPlace = popupNewCard.querySelector('.popup__form'); \nconst placeNameInput = popupNewCard.querySelector('input[name=\"place-name\"]'); \nconst placeLinkInput = popupNewCard.querySelector('input[name=\"link\"]'); \n\nconst popupConfirmDelete = document.querySelector('#popupConfirmDelete'); \nconst confirmDeleteForm = popupConfirmDelete.querySelector('.popup__form'); \n// const cancelDeleteButton = popupConfirmDelete.querySelector('.popup__cancel-button'); // Убрано, кнопки нет\n\nconst popupEditAvatar = document.querySelector('.popup_type_edit-avatar'); \nconst formEditAvatar = popupEditAvatar.querySelector('.popup__form'); \nconst avatarInput = formEditAvatar.querySelector('input[name=\"avatar-link\"]'); \n\n// Получаем кнопки отправки форм\nconst profileSubmitButton = formEditProfile.querySelector('.popup__submit');\nconst newPlaceSubmitButton = formNewPlace.querySelector('.popup__submit');\nconst avatarSubmitButton = formEditAvatar.querySelector('.popup__submit');\n\nconst validationConfig = {\n  formSelector: '.popup__form',\n  inputSelector: '.popup__input',\n  submitButtonSelector: '.popup__submit',\n  inactiveButtonClass: 'popup__submit_disabled',\n  inputErrorClass: 'popup__input_type_error',\n  errorClass: 'popup__error_visible'\n};\n\n// Для popupImage: найдём элементы один раз\nconst popupImageImg = popupImage.querySelector('.popup__image');\nconst popupImageCaption = popupImage.querySelector('.popup__caption');\n\nlet currentUserId = null; \nlet cardIdToDelete = null; \nlet cardElementToDelete = null; \n\n// --- Устанавливаем логотип ---\nlogoImg.src = logo; \n\n// Устанавливаем аватар по умолчанию (локальный файл)\nif (profileAvatarImage) {\n  profileAvatarImage.style.backgroundImage = `url(${avatar})`;\n}\n\nfunction renderLoading(buttonElement, isLoading, loadingText = 'Сохранение...') {\n  if (!buttonElement.dataset.originalText) {\n    buttonElement.dataset.originalText = buttonElement.textContent;\n  }\n  if (isLoading) {\n    buttonElement.textContent = loadingText;\n    buttonElement.disabled = true;\n  } else {\n    buttonElement.textContent = buttonElement.dataset.originalText;\n    buttonElement.disabled = false;\n  }\n}\n\n// --- Обработчик редактирования профиля ---\nformEditProfile.addEventListener('submit', evt => {\n  evt.preventDefault();\n  const submitButton = formEditProfile.querySelector('.popup__submit');\n  renderLoading(submitButton, true);\n\n  updateUserInfo(nameInput.value, descriptionInput.value)\n    .then(updatedUser => {\n      profileName.textContent = updatedUser.name;\n      profileDescription.textContent = updatedUser.about;\n      closePopup(popupEdit);\n    })\n    .catch(err => console.error(err))\n    .finally(() => {\n      renderLoading(submitButton, false);\n    });\n});\n\n// --- Обработчик добавления новой карточки ---\nformNewPlace.addEventListener('submit', evt => {\n  evt.preventDefault();\n  const submitButton = formNewPlace.querySelector('.popup__submit');\n  renderLoading(submitButton, true);\n\n  addNewCard({ name: placeNameInput.value, link: placeLinkInput.value })\n    .then(newCard => {\n      const cardElement = createCard(newCard, null, handleLikeCard, openImagePopup, currentUserId, openDeletePopup);\n      placesList.prepend(cardElement);\n      formNewPlace.reset();\n      closePopup(popupNewCard);\n    })\n    .catch(err => console.error(err))\n    .finally(() => {\n      renderLoading(submitButton, false);\n    });\n});\n\n// --- Обработка отправки формы обновления аватара ---\nformEditAvatar.addEventListener('submit', evt => {\n  evt.preventDefault();\n  const submitButton = formEditAvatar.querySelector('.popup__submit');\n  renderLoading(submitButton, true);\n\n  updateUserAvatar(avatarInput.value)\n    .then(updatedUser => {\n      if (profileAvatarImage) {\n        profileAvatarImage.style.backgroundImage = `url(${updatedUser.avatar})`;\n      }\n      closePopup(popupEditAvatar);\n    })\n    .catch(err => console.error('Ошибка обновления аватара:', err))\n    .finally(() => {\n      renderLoading(submitButton, false);\n    });\n});\n\n// --- Функция открытия попапа с изображением ---\nfunction handleOpenImagePopup(link, name) {\n  popupImageImg.src = link;\n  popupImageImg.alt = name;\n  popupImageCaption.textContent = name;\n  openPopup(popupImage);\n}\n\n// --- Обработчик лайка карточки ---\nfunction handleLikeCard(cardId, isLiked) {\n  if (isLiked) {\n    return removeLike(cardId);\n  } else {\n    return addLike(cardId);\n  }\n}\n\n// --- Открыть попап подтверждения удаления карточки ---\nfunction openDeletePopup(cardId, cardElement) {\n  cardIdToDelete = cardId;\n  cardElementToDelete = cardElement;\n  openPopup(popupConfirmDelete);\n}\n\n// --- Обработчик удаления карточки после подтверждения ---\nconfirmDeleteForm.addEventListener('submit', evt => {\n  evt.preventDefault();\n  if (!cardIdToDelete) return;\n\n  deleteCard(cardIdToDelete)\n    .then(() => {\n      cardElementToDelete.remove();\n      closePopup(popupConfirmDelete);\n      cardIdToDelete = null;\n      cardElementToDelete = null;\n    })\n    .catch(err => {\n      console.error('Ошибка удаления карточки:', err);\n      // Переменные не очищаем, чтобы можно было повторить попытку\n    });\n});\n\n// Убираем обработчик отмены удаления, так как кнопки нет\n// cancelDeleteButton.addEventListener('click', () => {\n//   closePopup(popupConfirmDelete);\n//   cardIdToDelete = null;\n//   cardElementToDelete = null;\n// });\n\n// --- Рендер массива карточек ---\nfunction renderCards(cards) {\n  cards.forEach(cardData => {\n    // Передаём все 6 аргументов в правильном порядке\n    const cardElement = createCard(cardData, null, handleLikeCard, openImagePopup, currentUserId, openDeletePopup);\n    placesList.append(cardElement);\n  });\n}\n\n// --- Получить и отобразить инфо пользователя и карточки ---\nPromise.all([getUserInfo(), getInitialCards()])\n  .then(([userData, cardsData]) => {\n    currentUserId = userData._id;\n\n    profileName.textContent = userData.name;\n    profileDescription.textContent = userData.about;\n\n    if (profileAvatarImage) {\n      profileAvatarImage.style.backgroundImage = `url(${userData.avatar})`;\n    }\n\n    placesList.innerHTML = '';\n    renderCards(cardsData);\n  })\n  .catch(err => {\n    console.error('Ошибка загрузки данных:', err);\n  });\n\n// --- Обработчик редактирования профиля ---\neditButton.addEventListener('click', () => {\n  openPopup(popupEdit);\n  nameInput.value = profileName.textContent;\n  descriptionInput.value = profileDescription.textContent;\n  clearValidation(formEditProfile, validationConfig);\n});\n\nformEditProfile.addEventListener('submit', evt => {\n  evt.preventDefault();\n  updateUserInfo(nameInput.value, descriptionInput.value)\n    .then(updatedUser => {\n      profileName.textContent = updatedUser.name;\n      profileDescription.textContent = updatedUser.about;\n      closePopup(popupEdit);\n    })\n    .catch(err => console.error(err));\n});\n\n// --- Обработчик добавления новой карточки ---\naddButton.addEventListener('click', () => {\n  openPopup(popupNewCard);\n  formNewPlace.reset();\n  clearValidation(formNewPlace, validationConfig);\n});\n\n// formNewPlace.addEventListener('submit', evt => {\n//   evt.preventDefault();\n//   addNewCard({ name: placeNameInput.value, link: placeLinkInput.value })\n//     .then(newCard => {\n//       // Передаём все 6 аргументов в правильном порядке\n//       const cardElement = createCard(newCard, null, handleLikeCard, openImagePopup, currentUserId, openDeletePopup);\n//       placesList.prepend(cardElement);\n//       formNewPlace.reset();\n//       closePopup(popupNewCard);\n//     })\n//     .catch(err => console.error(err));\n// });\n\n// --- Обработчик закрытия попапов по кнопкам закрытия и оверлею ---\npopups.forEach(popup => {\n  popup.querySelector('.popup__close').addEventListener('click', () => closePopup(popup));\n  setPopupCloseByOverlay(popup);\n});\n\n// --- Открытие попапа редактирования аватара ---\nfunction openEditAvatarPopup() {\n  openPopup(popupEditAvatar);\n  formEditAvatar.reset();\n  clearValidation(formEditAvatar, validationConfig);\n}\n\nif (profileAvatarImage) {\n  profileAvatarImage.addEventListener('click', openEditAvatarPopup);\n}\n\nif (avatarEditButton) {\n  avatarEditButton.addEventListener('click', openEditAvatarPopup);\n}\n\n// --- Обработка отправки формы обновления аватара ---\nformEditAvatar.addEventListener('submit', evt => {\n  evt.preventDefault();\n  const avatarUrl = avatarInput.value;\n  updateUserAvatar(avatarUrl)\n    .then(updatedUser => {\n      if (profileAvatarImage) {\n        profileAvatarImage.style.backgroundImage = `url(${updatedUser.avatar})`;\n      }\n      closePopup(popupEditAvatar);\n    })\n    .catch(err => console.error('Ошибка обновления аватара:', err));\n});\n\n// --- Включаем валидацию форм ---\nenableValidation(validationConfig);"],"names":["__webpack_require__","createCard","cardData","handleDeleteCard","handleLikeCard","openImagePopup","currentUserId","openDeletePopup","cardElement","document","querySelector","content","cloneNode","cardImage","cardTitle","likeButton","likeCount","deleteButton","updateLikes","textContent","likes","length","some","user","_id","classList","add","remove","src","link","alt","name","addEventListener","liked","then","updatedCard","catch","err","console","error","owner","p","config","baseUrl","headers","authorization","checkResponse","res","ok","json","Promise","reject","concat","status","updateUserInfo","about","fetch","method","body","JSON","stringify","updateUserAvatar","avatar","handleCloseByEscape","evt","key","openedPopup","closePopup","openPopup","popup","removeEventListener","popupImage","popupCaption","hideInputError","formElement","inputElement","errorElement","inputErrorClass","errorClass","toggleButtonState","inputList","buttonElement","validity","valid","hasInvalidInput","inactiveButtonClass","disabled","clearValidation","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","setCustomValidity","logoImg","profileAvatarImage","avatarEditButton","editButton","addButton","popupEdit","popupNewCard","placesList","popups","formEditProfile","nameInput","descriptionInput","profileName","profileDescription","formNewPlace","placeNameInput","placeLinkInput","popupConfirmDelete","confirmDeleteForm","popupEditAvatar","formEditAvatar","avatarInput","validationConfig","formSelector","cardIdToDelete","cardElementToDelete","renderLoading","isLoading","loadingText","arguments","undefined","dataset","originalText","cardId","isLiked","removeLike","addLike","openEditAvatarPopup","reset","logo","style","backgroundImage","preventDefault","submitButton","value","updatedUser","finally","_ref","newCard","prepend","all","_ref2","userData","cardsData","innerHTML","append","target","setPopupCloseByOverlay","avatarUrl","errorMessage","validationMessage","patternMismatch","showInputError","checkInputValidity","setEventListeners","enableValidation"],"sourceRoot":""}